#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>
#include <stdbool.h>

void quiz();
void cobra();
void gousma();
void menu();

int main() {
    setlocale(LC_ALL, "portuguese");
    srand(time(NULL));
    menu(); 
    return 0;
}

void menu() {
    int escolha;

    while (1) { 
        printf("\n  +------------------------------------+\n");
		printf("  ¦      PAULO AND ALYCIA'S ARCADE     ¦\n");
		printf("  ¦------------------------------------¦\n");
		printf("  ¦ 1) Perguntas e Respostas           ¦\n");
		printf("  ¦ 2) Cobra na Caixa                  ¦\n");
		printf("  ¦ 3) Gousma's War                    ¦\n");
		printf("  ¦ 4) Sair                            ¦\n");
	   	printf("  +------------------------------------+\n");
        printf("\n Escolha o que quer jogar: \n");
        scanf(" %d", &escolha);

        system("cls");  

        switch (escolha) {
            case 1:
                quiz();  
                break;
            
            case 2:
                cobra();  
                break;
            
            case 3:
                gousma();  
                break;
            
            case 4:
                printf(" Até a próxima!!!\n");
                exit(0);  
                break;
            
            default:
                printf(" Opção inválida\n");
        }
    }
}

void quiz() {
    printf("\n\t\t  =====================================\n");
	printf("\t\t          PERGUNTAS E RESPOSTAS        \n");
	printf("\t\t  =====================================\n\n");


    printf("\n  ===== REGRAS =====");
    printf("\n\n  Nesse jogo terão 5 questões de raciocínio lógico e 4 opções de múltipla escolha para responder, cada resposta correta você ganha 1 ponto.\n\n");
    printf ("  *** Aperte ENTER para iniciar ***\n");
    getchar();
    getchar();
    system("cls"); 

    int pontos, x;

	// loop que vai reiniciar o jogo se selecionado no final do jogo
    while (1) { 
        pontos = 0;

        // Primeira pergunta
        // cada pergunta tem um do-while para caso o usuario selecione uma opção inválida a pergunta irá se repetir
        do {
            printf("\n 1) Ana é irmã de Bruna, Bruna é irmã de Carla, Carla é mãe de Diana. O que Diana é de Ana?\n");
            printf("\n 1 - Prima\n 2 - Neta\n 3 - Irmã\n 4 - Sobrinha\n");
            printf("\n Resposta: ");
            scanf("%d", &x);

            switch (x) {
                case 1:
					printf("\n Poooxa :( A resposta correta era 4 - Sobrinha \n");
                    break; 
				case 2:
					printf("\n Poooxa :( A resposta correta era 4 - Sobrinha \n");
                    break; 
				case 3:
                    printf("\n Poooxa :( A resposta correta era 4 - Sobrinha \n");
                    break;
                case 4:
                    printf("\n Parabéns!!! Resposta correta\n");
                    pontos++; // adicionei um sistema de pontos para o usuario poder ver quantas perguntas acertou no final do jogo
                    break;
                default:
                    printf("\n Opção Inválida. Tente novamente.\n");
            }
        } while (x < 1 || x >= 5);  

        // Segunda pergunta
        do {
            printf("\n 2) Se Ana é bondosa, Cris é dedicada e Bia é calma, então Lisa é...n");
            printf("\n 1 - Legal\n 2 - Genial\n 3 - Amável\n 4 - Mimosa\n");
            printf("\n Resposta: ");
            scanf("%d", &x);

            switch (x) {
                case 1:
					printf("\n Poooxa :( A resposta correta era 4 - Mimosa \n");
                    break; 
				case 2: 
					printf("\n Poooxa :( A resposta correta era 4 - Mimosa \n");
                    break;
				case 3:
                    printf("\n Poooxa :( A resposta correta era 4 - Mimosa \n");
                    break;
                case 4:
                    printf("\n Parabéns!!! Resposta correta\n");
                    pontos++;
                    break;
                default:
                    printf("\n Opção Inválida. Tente novamente.\n");
            }
        } while (x < 1 || x > 4);

        // Terceira pergunta
        do {
            printf("\n 3) Um elevador leva 12 seg para subir no quarto andar. Quanto tempo leva para subir no sétimo andar?\n");
            printf("\n 1 - 16\n 2 - 18\n 3 - 24\n 4 - 28\n");
            printf("\n Resposta: ");
            scanf("%d", &x);

            switch (x) {
                case 1: 
                	printf("\n Poooxa :( A resposta correta era 3 - 24 \n");
                    break;
				case 2: 
					printf("\n Poooxa :( A resposta correta era 3 - 24 \n");
                    break;
                case 3:
                    printf("\n Parabéns!!! Resposta correta\n");
                    pontos++;
                    break;
				case 4:
                    printf("\n Poooxa :( A resposta correta era 3 - 24 \n");
                    break;
                default:
                    printf("\n Opção Inválida. Tente novamente.\n");
            }
        } while (x < 1 || x > 4);

        // Quarta pergunta
        do {
            printf("\n 4) Quatro suspeitos de praticar um crime fazem as seguintes declarações: \n");
            printf(" João: Carlos é o criminoso\n");
            printf(" Pedro: eu não sou criminoso\n");
            printf(" Carlos: Paulo é o criminoso\n");
            printf(" Paulo: Carlos está mentindo\n");
            printf(" Sabendo que apenas um dos suspeitos mente, determine quem é o criminoso.\n");
            printf("\n 1 - Carlos\n 2 - Pedro\n 3 - João\n 4 - Paulo\n");
            printf("\n Resposta: ");
            scanf("%d", &x);

            switch (x) {
                case 1:
                    printf("\n Parabéns!!! Resposta correta\n");
                    pontos++;
                    break;
				case 2:
					printf("\n Poooxa :( A resposta correta era 1 - Carlos \n");
                    break; 
				case 3: 
					printf("\n Poooxa :( A resposta correta era 1 - Carlos \n");
                    break;
				case 4:
                    printf("\n Poooxa :( A resposta correta era 1 - Carlos \n");
                    break;
                default:
                    printf("\n Opção Inválida. Tente novamente.\n");
            }
        } while (x < 1 || x > 4);

        // Quinta pergunta
        do {
            printf("\n 5) Thelma comprou 36 coxinhas para comer com suas três filhas, que horas são? \n");
            printf("\n 1 - 02:24\n 2 - 03:24\n 3 - 14:24\n 4 - 15:24\n");
            printf("\n Resposta: ");
            scanf("%d", &x);

            switch (x) {
                case 1:
					printf("\n Poooxa :( A resposta correta era 2 - 03:24 \n");
                    break; 
                case 2:
                    printf("\n Parabéns!!! Resposta correta\n");
                    pontos++;
                    break;
				case 3:
					printf("\n Poooxa :( A resposta correta era 2 - 03:24 \n");
                    break; 
				case 4:
                    printf("\n Poooxa :( A resposta correta era 2 - 03:24 \n");
                    break;
                default:
                    printf("\n Opção Inválida. Tente novamente.\n");
            }
        } while (x < 1 || x > 4);
        
        // acho que vou trocar essas perguntas

        // Finalização do jogo
         printf("\n\n  +-----------------------------------------------+\n");
		printf("  |      Jogo finalizado! Você fez %d/5 pontos     |\n", pontos);
		printf("  +-----------------------------------------------+\n");

        
        do {
        printf (" Você deseja...\n");
        printf(" (1) Jogar Novamente\n");
        printf(" (2) Voltar ao Menu Principal\n");
        scanf(" %d", &x);
            system("cls"); 


        if (x == 1) {
            quiz();  
        } else if (x == 2) {
            menu();  
        } else {
            printf(" Opção Inválida\n");
            continue;
        }
        } while (x < 1 || x > 2);
    }
}

void cobra() {
    printf("\n\t\t  ====================================\n");
    printf("\t\t            COBRA NA CAIXA");
    printf("\n\t\t  ====================================\n");
    printf("\n  Você e seu parceiro são exploradores e estão presos em uma tumba egípcia!");
    printf("\n  No centro da sala, há cinco caixas: uma delas tem o botão que abre a porta,");
    printf("\n  mas outra esconde uma cobra mortal. A cada rodada, suas posições mudam aleatoriamente.");
    printf("\n\n  °°°°° Como jogar °°°°°");
    printf("\n  Escolha uma caixa para abrir.");
    printf("\n  Se encontrar o botão, a porta se abre e você vence.");
    printf("\n  Se encontrar a cobra, é fim de jogo.\n\n");
    printf ("  *** Pressione a tecla ENTER para continuar *** \n");
    getchar();
    getchar();
    system("cls");  

    char nomes[7][20] = {"Alessandra", "Eliane", "Erick", "Luiz", "Pedro", "Polyana", "Computador"};
    int escolha1, escolha2;
    
    printf("\n  Escolha o nome do(a) primeiro(a) explorador(a): ");
    printf("\n  1 - Alessandra\n  2 - Eliane\n  3 - Erick\n  4 - Luiz\n  5 - Pedro\n  6 - Polyana\n  7 - Computador\n");
    printf("\n  Digite o número correspondente: ");
    scanf("%d", &escolha1);
    
    printf("\n  Escolha o nome do(a) segundo(a) explorador(a): ");
    printf("\n  1 - Alessandra\n  2 - Eliane\n  3 - Erick\n  4 - Luiz\n  5 - Pedro\n  6 - Polyana\n  7 - Computador\n");
    printf("\n  Digite o número correspondente: ");
    scanf("%d", &escolha2);
    
    escolha1 -= 1;
    escolha2 -= 1;

    int jogador_atual = 0;
    int jogadores[2] = {escolha1, escolha2};

    while (1) {
        int caixa_escolhida;
        
        printf("\n  É a vez de %s!", nomes[jogadores[jogador_atual]]);
        printf("\n  Escolha uma caixa (digite um número de 1 a 5): ");
        scanf("%d", &caixa_escolhida);

        int botao = rand() % 5 + 1;
        int cobra = rand() % 5 + 1;

        if (caixa_escolhida == botao) {
            printf("\n  Parabéns, %s encontrou o botão e a porta se abriu!\n", nomes[jogadores[jogador_atual]]);
            break;
        } else if (caixa_escolhida == cobra) {
            printf("\n  Que pena, %s encontrou a cobra e perdeu o jogo!\n", nomes[jogadores[jogador_atual]]);
            break;
        } else {
            jogador_atual = (jogador_atual + 1) % 2; 
            printf("\n  Caixa vazia\n");
        }
    }

    int x;

    
    do {
        printf("\n Você deseja...\n");
        printf(" (1) Jogar Novamente\n");
        printf(" (2) Voltar ao Menu Principal\n");
        scanf(" %d", &x);
        system("cls");  

        if (x == 1) {
            cobra();  
        } else if (x == 2) {
            menu();  
        } else {
            printf(" Opção Inválida\n");
            continue; 
        }
    } while (x != 2); 
}


#define MAX_GOUSMAS 2
#define MAX_FURIA 5

typedef struct {
    int furia;
} Gousma;

typedef struct {
    Gousma gousmas[MAX_GOUSMAS];
    int num_gousmas;
} Jogador;


static void inicializarJogador(Jogador *jogador) {
    jogador->num_gousmas = 2;
    for (int i = 0; i < jogador->num_gousmas; i++) {
        jogador->gousmas[i].furia = 1;
    }
}

static void mostrarStatus(Jogador *jogador1, Jogador *jogador2) {
    printf("\n--- Status dos Jogadores ---\n");
    printf("Jogador 1 - Gousmas: ");
    for (int i = 0; i < jogador1->num_gousmas; i++) {
        printf("[%d] ", jogador1->gousmas[i].furia);
    }
    printf("\nJogador 2 - Gousmas: ");
    for (int i = 0; i < jogador2->num_gousmas; i++) {
        printf("[%d] ", jogador2->gousmas[i].furia);
    }
    printf("\n");
}

static bool verificarDerrota(Jogador *jogador) {
    return jogador->num_gousmas == 0;
}

static void atacar(Jogador *atacante, Jogador *defensor, int gousma_atacante, int gousma_defensor) {
    if (gousma_atacante < 0 || gousma_atacante >= atacante->num_gousmas ||
        gousma_defensor < 0 || gousma_defensor >= defensor->num_gousmas) {
        printf("Índice de Gousma inválido!\n");
        return;
    }
    
    defensor->gousmas[gousma_defensor].furia += atacante->gousmas[gousma_atacante].furia;
    atacante->gousmas[gousma_atacante].furia = 0;
    
    printf("\nGousma %d do Jogador atacou Gousma %d do Jogador adversário!\n", 
           gousma_atacante + 1, gousma_defensor + 1);
    
    if (defensor->gousmas[gousma_defensor].furia > MAX_FURIA) {
        printf("Gousma %d do Jogador adversário desintegrou!\n", gousma_defensor + 1);
        for (int i = gousma_defensor; i < defensor->num_gousmas - 1; i++) {
            defensor->gousmas[i] = defensor->gousmas[i + 1];
        }
        defensor->num_gousmas--;
    }
    
    for (int i = gousma_atacante; i < atacante->num_gousmas - 1; i++) {
        atacante->gousmas[i] = atacante->gousmas[i + 1];
    }
    atacante->num_gousmas--;
}

static void dividirGousma(Jogador *jogador, int gousma_idx, int furia_nova) {
    if (jogador->num_gousmas >= MAX_GOUSMAS) {
        printf("\nVocê já tem o número máximo de Gousmas!\n");
        return;
    }
    
    if (gousma_idx < 0 || gousma_idx >= jogador->num_gousmas) {
        printf("\nÍndice de Gousma inválido!\n");
        return;
    }
    
    if (furia_nova <= 0 || furia_nova >= jogador->gousmas[gousma_idx].furia) {
        printf("\nValor de fúria inválido para divisão!\n");
        return;
    }
    
    jogador->gousmas[jogador->num_gousmas].furia = furia_nova;
    jogador->num_gousmas++;
    jogador->gousmas[gousma_idx].furia -= furia_nova;
    printf("\nGousma dividida com sucesso!\n");
}


void gousma() {
    printf("\n\t\t  ====================================\n");
    printf("\t\t            GOUSMA'S WAR");
    printf("\n\t\t  ====================================\n");
    printf("\n  Neste jogo de estratégia, os jogadores controlam criaturas chamadas Gousmas,\n");
    printf("  que podem se dividir e acumular fúria ao serem atacadas.\n\n");
    printf("  REGRAS:\n");
    printf("  - Cada jogador começa com 2 Gousmas (nível 1 de fúria cada)\n");
    printf("  - Ao atacar, toda a fúria é transferida para a Gousma atacada\n");
    printf("  - Se uma Gousma atingir fúria > 5, ela se desintegra\n");
    printf("  - Você pode dividir uma Gousma, transferindo parte da fúria para uma nova\n");
    printf("  - O jogador que perder todas as Gousmas perde o jogo\n\n");
    printf("  *** Pressione ENTER para começar ***\n");
    getchar();
    getchar();
    system("cls");

    Jogador jogador1, jogador2;
    inicializarJogador(&jogador1);
    inicializarJogador(&jogador2);
    
    int turno = 1;
    Jogador *atual, *adversario;
    
    while (1) {
        system("cls");
        printf("\n\t\t  ====================================\n");
        printf("\t\t            GOUSMA'S WAR - TURNO %d", turno);
        printf("\n\t\t  ====================================\n");
        
        atual = (turno == 1) ? &jogador1 : &jogador2;
        adversario = (turno == 1) ? &jogador2 : &jogador1;
        
        mostrarStatus(&jogador1, &jogador2);
        
        if (verificarDerrota(atual)) {
            printf("\nJogador %d perdeu todas as Gousmas!\n", turno);
            printf("Jogador %d venceu!\n", (turno == 1) ? 2 : 1);
            break;
        }
        
        printf("\nTurno do Jogador %d\n", turno);
        printf("1. Atacar\n");
        printf("2. Dividir Gousma\n");
        printf("Escolha sua ação: ");
        
        int acao;
        scanf("%d", &acao);
        
        if (acao == 1) {
            printf("Escolha sua Gousma para atacar (1-%d): ", atual->num_gousmas);
            int gousma_atacante;
            scanf("%d", &gousma_atacante);
            
            printf("Escolha a Gousma adversária para atacar (1-%d): ", adversario->num_gousmas);
            int gousma_defensor;
            scanf("%d", &gousma_defensor);
            
            atacar(atual, adversario, gousma_atacante - 1, gousma_defensor - 1);
        } else if (acao == 2) {
            printf("Escolha a Gousma para dividir (1-%d): ", atual->num_gousmas);
            int gousma_idx;
            scanf("%d", &gousma_idx);
            
            printf("Quanta fúria transferir para a nova Gousma? (1-%d): ", 
                   atual->gousmas[gousma_idx - 1].furia - 1);
            int furia_nova;
            scanf("%d", &furia_nova);
            
            dividirGousma(atual, gousma_idx - 1, furia_nova);
        } else {
            printf("Ação inválida!\n");
            continue;
        }
        
        printf("\nPressione ENTER para continuar...");
        getchar();
        getchar();
        
        turno = (turno == 1) ? 2 : 1;
    }
    
    int opcao;
    do {
        printf("\nDeseja jogar novamente?\n");
        printf("1. Jogar novamente\n");
        printf("2. Voltar ao menu principal\n");
        printf("Escolha: ");
        scanf("%d", &opcao);
        
        if (opcao == 1) {
            gousma();
            return;
        } else if (opcao == 2) {
            system("cls");
            return;
        } else {
            printf("Opção inválida!\n");
        }
    } while (opcao != 1 && opcao != 2);
}
